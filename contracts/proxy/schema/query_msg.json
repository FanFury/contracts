{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "QueryMsg",
  "oneOf": [
    {
      "description": "Returns information about Proxy Configuration",
      "type": "object",
      "required": [
        "configuration"
      ],
      "properties": {
        "configuration": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Returns counts of Tokens related to the Liquidity Pool",
      "type": "object",
      "required": [
        "pool"
      ],
      "properties": {
        "pool": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Returns information about Tokens Paired in the Liquidity Pool",
      "type": "object",
      "required": [
        "pair"
      ],
      "properties": {
        "pair": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Returns information about the simulation of the swap in a [`SimulationResponse`] object.",
      "type": "object",
      "required": [
        "simulation"
      ],
      "properties": {
        "simulation": {
          "type": "object",
          "required": [
            "offer_asset"
          ],
          "properties": {
            "offer_asset": {
              "$ref": "#/definitions/Asset"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Returns information about the reverse simulation in a [`ReverseSimulationResponse`] object.",
      "type": "object",
      "required": [
        "reverse_simulation"
      ],
      "properties": {
        "reverse_simulation": {
          "type": "object",
          "required": [
            "ask_asset"
          ],
          "properties": {
            "ask_asset": {
              "$ref": "#/definitions/Asset"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Returns information about the cumulative prices in a [`CumulativePricesResponse`] object",
      "type": "object",
      "required": [
        "cumulative_prices"
      ],
      "properties": {
        "cumulative_prices": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Returns Timestamp after which Swap operations would be permitted in the Liquidity Pool",
      "type": "object",
      "required": [
        "get_swap_opening_date"
      ],
      "properties": {
        "get_swap_opening_date": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Returns status of Fury Reward Tokens Bonded or allocated at discounted rate against Native or Pair Investment",
      "type": "object",
      "required": [
        "get_bonding_details"
      ],
      "properties": {
        "get_bonding_details": {
          "type": "object",
          "required": [
            "user_address"
          ],
          "properties": {
            "user_address": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Returns Fury Equivalent for some UST amount (without operational overheads of swap)",
      "type": "object",
      "required": [
        "get_fury_equivalent_to_ust"
      ],
      "properties": {
        "get_fury_equivalent_to_ust": {
          "type": "object",
          "required": [
            "ust_count"
          ],
          "properties": {
            "ust_count": {
              "$ref": "#/definitions/Uint128"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Returns UST Equivalent for some Fury amount (without operational overheads of swap)",
      "type": "object",
      "required": [
        "get_ust_equivalent_to_fury"
      ],
      "properties": {
        "get_ust_equivalent_to_fury": {
          "type": "object",
          "required": [
            "fury_count"
          ],
          "properties": {
            "fury_count": {
              "$ref": "#/definitions/Uint128"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Returns Platform Fee required for specific ExecuteMsg",
      "type": "object",
      "required": [
        "query_platform_fees"
      ],
      "properties": {
        "query_platform_fees": {
          "type": "object",
          "required": [
            "msg"
          ],
          "properties": {
            "msg": {
              "$ref": "#/definitions/Binary"
            }
          }
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "Asset": {
      "title": "Description",
      "description": "This enum describes asset.",
      "type": "object",
      "required": [
        "amount",
        "info"
      ],
      "properties": {
        "amount": {
          "description": "the amount of an asset",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "info": {
          "description": "the available type of asset from [`AssetInfo`]",
          "allOf": [
            {
              "$ref": "#/definitions/AssetInfo"
            }
          ]
        }
      }
    },
    "AssetInfo": {
      "title": "Description",
      "description": "This enum describes available types of Token. ## Examples ``` # use cosmwasm_std::Addr; # use astroport::asset::AssetInfo::{NativeToken, Token}; Token { contract_addr: Addr::unchecked(\"terra...\") }; NativeToken { denom: String::from(\"uluna\") }; ```",
      "oneOf": [
        {
          "description": "Token",
          "type": "object",
          "required": [
            "token"
          ],
          "properties": {
            "token": {
              "type": "object",
              "required": [
                "contract_addr"
              ],
              "properties": {
                "contract_addr": {
                  "$ref": "#/definitions/Addr"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Native token",
          "type": "object",
          "required": [
            "native_token"
          ],
          "properties": {
            "native_token": {
              "type": "object",
              "required": [
                "denom"
              ],
              "properties": {
                "denom": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>",
      "type": "string"
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
