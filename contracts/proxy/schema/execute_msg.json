{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "oneOf": [
    {
      "description": "Configure the Proxy Parameters after Astroport Core contract initialization",
      "type": "object",
      "required": [
        "configure"
      ],
      "properties": {
        "configure": {
          "type": "object",
          "required": [
            "swap_opening_date"
          ],
          "properties": {
            "liquidity_token": {
              "description": "Liquidity LP token contract address of Astroport-Core",
              "type": [
                "string",
                "null"
              ]
            },
            "pool_pair_address": {
              "description": "Liquidity Pool Pair contract address of Astroport-Core",
              "type": [
                "string",
                "null"
              ]
            },
            "swap_opening_date": {
              "description": "Time in nano seconds since EPOC when the swapping will be enabled",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint64"
                }
              ]
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "title": "Description",
      "description": "Receives a message of type [`Cw20ReceiveMsg`]",
      "type": "object",
      "required": [
        "receive"
      ],
      "properties": {
        "receive": {
          "$ref": "#/definitions/Cw20ReceiveMsg"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "ProvidePairForReward a user provides pair liquidity (UST + Fury balanced) and gets Fury rewards",
      "type": "object",
      "required": [
        "provide_pair_for_reward"
      ],
      "properties": {
        "provide_pair_for_reward": {
          "type": "object",
          "required": [
            "assets"
          ],
          "properties": {
            "assets": {
              "description": "the type of asset available in [`Asset`]",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Asset"
              },
              "maxItems": 2,
              "minItems": 2
            },
            "auto_stake": {
              "description": "Determines whether an autostake will be performed on the generator",
              "type": [
                "boolean",
                "null"
              ]
            },
            "slippage_tolerance": {
              "description": "the slippage tolerance for sets the maximum percent of price movement",
              "anyOf": [
                {
                  "$ref": "#/definitions/Decimal"
                },
                {
                  "type": "null"
                }
              ]
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "ProvideNativeForReward a user provides native liquidity (UST only) and gets Fury rewards",
      "type": "object",
      "required": [
        "provide_native_for_reward"
      ],
      "properties": {
        "provide_native_for_reward": {
          "type": "object",
          "required": [
            "asset"
          ],
          "properties": {
            "asset": {
              "description": "the type of asset available in [`Asset`]",
              "allOf": [
                {
                  "$ref": "#/definitions/Asset"
                }
              ]
            },
            "auto_stake": {
              "description": "Determines whether an autostake will be performed on the generator",
              "type": [
                "boolean",
                "null"
              ]
            },
            "slippage_tolerance": {
              "description": "the slippage tolerance for sets the maximum percent of price movement",
              "anyOf": [
                {
                  "$ref": "#/definitions/Decimal"
                },
                {
                  "type": "null"
                }
              ]
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "ProvideLiquidity an Authorized user provides pair liquidity and gets lp_tokens",
      "type": "object",
      "required": [
        "provide_liquidity"
      ],
      "properties": {
        "provide_liquidity": {
          "type": "object",
          "required": [
            "assets"
          ],
          "properties": {
            "assets": {
              "description": "the type of asset available in [`Asset`]",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Asset"
              },
              "maxItems": 2,
              "minItems": 2
            },
            "auto_stake": {
              "description": "Determines whether an autostake will be performed on the generator",
              "type": [
                "boolean",
                "null"
              ]
            },
            "slippage_tolerance": {
              "description": "the slippage tolerance for sets the maximum percent of price movement",
              "anyOf": [
                {
                  "$ref": "#/definitions/Decimal"
                },
                {
                  "type": "null"
                }
              ]
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Swap an offer asset to the other",
      "type": "object",
      "required": [
        "swap"
      ],
      "properties": {
        "swap": {
          "type": "object",
          "required": [
            "offer_asset"
          ],
          "properties": {
            "belief_price": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Decimal"
                },
                {
                  "type": "null"
                }
              ]
            },
            "max_spread": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Decimal"
                },
                {
                  "type": "null"
                }
              ]
            },
            "offer_asset": {
              "$ref": "#/definitions/Asset"
            },
            "to": {
              "type": [
                "string",
                "null"
              ]
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Claim the Discounted Reward Fury after bond maturity",
      "type": "object",
      "required": [
        "reward_claim"
      ],
      "properties": {
        "reward_claim": {
          "type": "object",
          "required": [
            "receiver",
            "withdrawal_amount"
          ],
          "properties": {
            "receiver": {
              "type": "string"
            },
            "withdrawal_amount": {
              "$ref": "#/definitions/Uint128"
            }
          }
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "Asset": {
      "title": "Description",
      "description": "This enum describes asset.",
      "type": "object",
      "required": [
        "amount",
        "info"
      ],
      "properties": {
        "amount": {
          "description": "the amount of an asset",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "info": {
          "description": "the available type of asset from [`AssetInfo`]",
          "allOf": [
            {
              "$ref": "#/definitions/AssetInfo"
            }
          ]
        }
      }
    },
    "AssetInfo": {
      "title": "Description",
      "description": "This enum describes available types of Token. ## Examples ``` # use cosmwasm_std::Addr; # use astroport::asset::AssetInfo::{NativeToken, Token}; Token { contract_addr: Addr::unchecked(\"terra...\") }; NativeToken { denom: String::from(\"uluna\") }; ```",
      "oneOf": [
        {
          "description": "Token",
          "type": "object",
          "required": [
            "token"
          ],
          "properties": {
            "token": {
              "type": "object",
              "required": [
                "contract_addr"
              ],
              "properties": {
                "contract_addr": {
                  "$ref": "#/definitions/Addr"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Native token",
          "type": "object",
          "required": [
            "native_token"
          ],
          "properties": {
            "native_token": {
              "type": "object",
              "required": [
                "denom"
              ],
              "properties": {
                "denom": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>",
      "type": "string"
    },
    "Cw20ReceiveMsg": {
      "description": "Cw20ReceiveMsg should be de/serialized under `Receive()` variant in a ExecuteMsg",
      "type": "object",
      "required": [
        "amount",
        "msg",
        "sender"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "msg": {
          "$ref": "#/definitions/Binary"
        },
        "sender": {
          "type": "string"
        }
      }
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "Uint64": {
      "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
      "type": "string"
    }
  }
}
