{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "InstantiateMsg",
  "type": "object",
  "required": [
    "admin_address",
    "authorized_liquidity_provider",
    "custom_token_address",
    "max_bonding_limit_per_user",
    "native_bonding_period_in_sec",
    "native_discount_rate",
    "native_investment_receive_wallet",
    "native_investment_reward_wallet",
    "pair_bonding_period_in_sec",
    "pair_discount_rate",
    "pair_fury_reward_wallet",
    "pair_lp_tokens_holder",
    "platform_fees",
    "platform_fees_collector_wallet",
    "swap_fees",
    "swap_opening_date",
    "transaction_fees"
  ],
  "properties": {
    "admin_address": {
      "description": "admin address for configuration activities",
      "type": "string"
    },
    "authorized_liquidity_provider": {
      "description": "This address has the authority to provide liquidity (balanced UST + Fury) and in return shall get the LP tokens",
      "type": "string"
    },
    "custom_token_address": {
      "description": "contract address of Fury token",
      "type": "string"
    },
    "max_bonding_limit_per_user": {
      "description": "Maximum number of simultaneous outstanding Bonds of discounted Reward Fury Tokens permitted per user",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "native_bonding_period_in_sec": {
      "description": "bonding period when only UST is provided",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "native_discount_rate": {
      "description": "discount_rate when only UST is provided",
      "type": "integer",
      "format": "uint16",
      "minimum": 0.0
    },
    "native_investment_receive_wallet": {
      "description": "The native(UST only) investment will be stored into this wallet",
      "type": "string"
    },
    "native_investment_reward_wallet": {
      "description": "Fury tokens for native(UST only) investment will be fetched from this wallet",
      "type": "string"
    },
    "pair_bonding_period_in_sec": {
      "description": "bonding period when fury and UST are both provided",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "pair_discount_rate": {
      "description": "discount_rate when fury and UST are both provided",
      "type": "integer",
      "format": "uint16",
      "minimum": 0.0
    },
    "pair_fury_reward_wallet": {
      "description": "Fury tokens for balanced investment will be fetched from this wallet",
      "type": "string"
    },
    "pair_lp_tokens_holder": {
      "description": "The LP tokens generated at time of Pair investment for discounted Fury Rewards will be assigned to this wallet",
      "type": "string"
    },
    "platform_fees": {
      "description": "Platform Fee Specified in percentage multiplied by 100, i.e. 100% = 10000 and 0.01% = 1",
      "allOf": [
        {
          "$ref": "#/definitions/Uint128"
        }
      ]
    },
    "platform_fees_collector_wallet": {
      "description": "The wallet to which various fees that is collected shall be transferred",
      "type": "string"
    },
    "pool_pair_address": {
      "description": "The underlying Astroport-Core Pair Contract address",
      "type": [
        "string",
        "null"
      ]
    },
    "swap_fees": {
      "description": "Swap Fees pecified in percentage multiplied by 100, i.e. 100% = 10000 and 0.01% = 1",
      "allOf": [
        {
          "$ref": "#/definitions/Uint128"
        }
      ]
    },
    "swap_opening_date": {
      "description": "Time in nano seconds since EPOC when the swapping will be enabled",
      "allOf": [
        {
          "$ref": "#/definitions/Uint64"
        }
      ]
    },
    "transaction_fees": {
      "description": "Transaction Fee Specified in percentage multiplied by 100, i.e. 100% = 10000 and 0.01% = 1",
      "allOf": [
        {
          "$ref": "#/definitions/Uint128"
        }
      ]
    }
  },
  "definitions": {
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "Uint64": {
      "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
      "type": "string"
    }
  }
}
