{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "oneOf": [
    {
      "type": "object",
      "required": [
        "receive"
      ],
      "properties": {
        "receive": {
          "$ref": "#/definitions/Cw20ReceiveMsg"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "set_platform_fee_wallets"
      ],
      "properties": {
        "set_platform_fee_wallets": {
          "type": "object",
          "required": [
            "wallet_percentages"
          ],
          "properties": {
            "wallet_percentages": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/WalletPercentage"
              }
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "set_pool_type_params"
      ],
      "properties": {
        "set_pool_type_params": {
          "type": "object",
          "required": [
            "max_teams_for_gamer",
            "max_teams_for_pool",
            "min_teams_for_pool",
            "pool_fee",
            "pool_type",
            "wallet_percentages"
          ],
          "properties": {
            "max_teams_for_gamer": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            },
            "max_teams_for_pool": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            },
            "min_teams_for_pool": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            },
            "pool_fee": {
              "$ref": "#/definitions/Uint128"
            },
            "pool_type": {
              "type": "string"
            },
            "wallet_percentages": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/WalletPercentage"
              }
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "cancel_game"
      ],
      "properties": {
        "cancel_game": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "lock_game"
      ],
      "properties": {
        "lock_game": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "create_pool"
      ],
      "properties": {
        "create_pool": {
          "type": "object",
          "required": [
            "pool_type"
          ],
          "properties": {
            "pool_type": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "claim_reward"
      ],
      "properties": {
        "claim_reward": {
          "type": "object",
          "required": [
            "gamer"
          ],
          "properties": {
            "gamer": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "claim_refund"
      ],
      "properties": {
        "claim_refund": {
          "type": "object",
          "required": [
            "gamer"
          ],
          "properties": {
            "gamer": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "game_pool_reward_distribute"
      ],
      "properties": {
        "game_pool_reward_distribute": {
          "type": "object",
          "required": [
            "game_winners",
            "is_final_batch",
            "pool_id",
            "ust_for_rake"
          ],
          "properties": {
            "game_winners": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GameResult"
              }
            },
            "is_final_batch": {
              "type": "boolean"
            },
            "pool_id": {
              "type": "string"
            },
            "ust_for_rake": {
              "$ref": "#/definitions/Uint128"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "game_pool_bid_submit_command"
      ],
      "properties": {
        "game_pool_bid_submit_command": {
          "type": "object",
          "required": [
            "amount",
            "gamer",
            "pool_id",
            "pool_type",
            "team_id"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "gamer": {
              "type": "string"
            },
            "pool_id": {
              "type": "string"
            },
            "pool_type": {
              "type": "string"
            },
            "team_id": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "sweep"
      ],
      "properties": {
        "sweep": {
          "type": "object",
          "required": [
            "funds"
          ],
          "properties": {
            "funds": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Coin"
              }
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "swap"
      ],
      "properties": {
        "swap": {
          "type": "object",
          "required": [
            "amount",
            "pool_id"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "pool_id": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>",
      "type": "string"
    },
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "Cw20ReceiveMsg": {
      "description": "Cw20ReceiveMsg should be de/serialized under `Receive()` variant in a ExecuteMsg",
      "type": "object",
      "required": [
        "amount",
        "msg",
        "sender"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "msg": {
          "$ref": "#/definitions/Binary"
        },
        "sender": {
          "type": "string"
        }
      }
    },
    "GameResult": {
      "description": "This is used for saving game result details",
      "type": "object",
      "required": [
        "game_id",
        "gamer_address",
        "refund_amount",
        "reward_amount",
        "team_id",
        "team_points",
        "team_rank"
      ],
      "properties": {
        "game_id": {
          "type": "string"
        },
        "gamer_address": {
          "type": "string"
        },
        "refund_amount": {
          "$ref": "#/definitions/Uint128"
        },
        "reward_amount": {
          "$ref": "#/definitions/Uint128"
        },
        "team_id": {
          "type": "string"
        },
        "team_points": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "team_rank": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "WalletPercentage": {
      "description": "This is used for saving various vesting details",
      "type": "object",
      "required": [
        "percentage",
        "wallet_address",
        "wallet_name"
      ],
      "properties": {
        "percentage": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "wallet_address": {
          "type": "string"
        },
        "wallet_name": {
          "type": "string"
        }
      }
    }
  }
}
